<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>geek42 - jyf</title><link href="https://geek42.info/" rel="alternate"></link><link href="https://geek42.info/feeds/jyf.atom.xml" rel="self"></link><id>https://geek42.info/</id><updated>2025-01-21T13:00:00+08:00</updated><subtitle>虽千万人，吾往矣</subtitle><entry><title>alpinelinux的启动盘定制</title><link href="https://geek42.info/alpinelinux-udisk.html" rel="alternate"></link><published>2025-01-21T13:00:00+08:00</published><updated>2025-01-21T13:00:00+08:00</updated><author><name>jyf</name></author><id>tag:geek42.info,2025-01-21:/alpinelinux-udisk.html</id><summary type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;我一直比较喜欢迷你发行版,但是作为一个懒人，自己却不太
爱每次都去定制 &lt;em&gt;initramfs&lt;/em&gt; 这类东西，所以我发现 &lt;em&gt;alpinelinux&lt;/em&gt;
可以极大满 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;我一直比较喜欢迷你发行版,但是作为一个懒人，自己却不太
爱每次都去定制 &lt;em&gt;initramfs&lt;/em&gt; 这类东西，所以我发现 &lt;em&gt;alpinelinux&lt;/em&gt;
可以极大满足我的这个癖好，因为他提供了一些特性让你可以把
定制外部化，形成一个tarball，然后在他的 &lt;em&gt;initramfs&lt;/em&gt; 的启动
阶段加载你的这些定制。&lt;/p&gt;
&lt;p&gt;另外一个问题是：我以前玩的板子，如果跑一般的系统，由于文件
系统频繁读写，会非常损u盘或者tf卡，而 &lt;em&gt;alpinelinux&lt;/em&gt; 的 &lt;em&gt;diskless&lt;/em&gt;
模式是系统加载到内存，除非你有意定制自己的一些服务读写盘，
否则没这个问题，这点非常适合我这种日常不审计日志的人&lt;/p&gt;
&lt;p&gt;基于以上两点，我打算动手来做个定制包，目标为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以headless运行,也就是插上主机，加电即可最后引导至期望的系统&lt;/li&gt;
&lt;li&gt;自动修改hostname以及自动连网，我这里的case是wifi&lt;/li&gt;
&lt;li&gt;自动配置好sshd服务尤其是认证的公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下截图是本次的目标机&lt;/p&gt;
&lt;p&gt;&lt;img alt="目标机" src="images/alpinelinux/host.jpeg"&gt;&lt;/p&gt;
&lt;h1&gt;实现步骤&lt;/h1&gt;
&lt;h2&gt;headless上电启动支持&lt;/h2&gt;
&lt;p&gt;这一步主要是要手动做个启动盘 同时由于我的目标机是现代机，支持uefi,
所以目标进一步细分为制作一个uefi支持的启动盘&lt;/p&gt;
&lt;p&gt;uefi的规范比较复杂，网上的中文资料也很垃圾，同时他支持特性很多，网上
很多资料都是泛泛而谈，一般都涉及 &lt;code&gt;efibootmgr&lt;/code&gt; 但我们是 &lt;code&gt;headless&lt;/code&gt; 安装
所以实际不可能看到bios输出而去选择，因此我选择了一个最简单的玩法就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将启动盘按照uefi规范分区&lt;/li&gt;
&lt;li&gt;为启动盘安装适合的引导器，这里选择 &lt;strong&gt;syslinux&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;分区&lt;/h3&gt;
&lt;p&gt;uefi的默认启动分区叫 &lt;strong&gt;esp&lt;/strong&gt; 要求是 &lt;strong&gt;gpt&lt;/strong&gt;分区表的&lt;strong&gt;vfat&lt;/strong&gt; 格式 实践
中一般不安排在第一个分区，防止跟mbr那类冲突，但是我这是uefi only的板
子,所以无所谓 就安排在了第一分区 以下是我网上抄来的脚本用于快速分区&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb

wipefs&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="c1"&gt;# Not sure if this is required but can&amp;#39;t hurt&lt;/span&gt;
dd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# 设置磁盘分区格式为gpt&lt;/span&gt;
parted&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mklabel&lt;span class="w"&gt; &lt;/span&gt;gpt

&lt;span class="c1"&gt;# 开个ESP分区&lt;/span&gt;
&lt;span class="c1"&gt;# 1MiB 是 start位置，2GiB 是分区大小&lt;/span&gt;
parted&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;--align&lt;span class="o"&gt;=&lt;/span&gt;optimal&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkpart&lt;span class="w"&gt; &lt;/span&gt;ESP&lt;span class="w"&gt; &lt;/span&gt;fat32&lt;span class="w"&gt; &lt;/span&gt;1MiB&lt;span class="w"&gt; &lt;/span&gt;2GiB&lt;span class="w"&gt; &lt;/span&gt;
parted&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;esp&lt;span class="w"&gt; &lt;/span&gt;on

&lt;span class="c1"&gt;# 2GiB 是 start位置，100% 是分区大小 意思使用剩下容量的百分百&lt;/span&gt;
&lt;span class="c1"&gt;# 要注意 这里的 start位置跟前面分区大小有关系 一定要计算好&lt;/span&gt;
&lt;span class="c1"&gt;# 切勿产生overlap&lt;/span&gt;
parted&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;--align&lt;span class="o"&gt;=&lt;/span&gt;optimal&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkpart&lt;span class="w"&gt; &lt;/span&gt;ext4&lt;span class="w"&gt; &lt;/span&gt;2GiB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%

sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;

mkfs.vfat&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;EFI&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
mkfs.ext4&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;ROOT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意以上的 &lt;code&gt;disk=/dev/sdb&lt;/code&gt; 这部分 请务必按照自己
设备实际情况修改，一定要仔细对照清楚，否则容易丢失数据&lt;/p&gt;
&lt;p&gt;以上脚本我们把我的/dev/sdb设备(上图tf卡) 转成了gpt分区表
同时新建了俩分区，第一个是esp也就是启动用的，第二个是
预备将来用作数据区的&lt;/p&gt;
&lt;h3&gt;安装与配置引导器&lt;/h3&gt;
&lt;p&gt;这里选择的是 syslinux 同时目标机是x86_64架构，按uefi规范
系统会自动加载 &lt;code&gt;esp分区/efi/boot/bootx64.efi&lt;/code&gt; 这个文件
这里我们可以去 syslinux官网下载对应的 x86_64 架构的 syslinux.efi
文件放到前述位置，同时在相同目录下提供一个配置文件 &lt;code&gt;syslinux.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于debian系用户，可直接安装包 &lt;code&gt;syslinux-efi&lt;/code&gt; 安装完以后 可以
在目录 &lt;code&gt;/usr/lib/SYSLINUX.EFI/efi64/&lt;/code&gt; 下找到引导器 &lt;code&gt;syslinux.efi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同时在 &lt;code&gt;/usr/lib/syslinux/modules/&lt;/code&gt; 有所有依赖的功能项，可以按需
或者全部复制到 &lt;code&gt;esp分区/efi/boot/&lt;/code&gt; 目录下,我选择的就是后者&lt;/p&gt;
&lt;p&gt;最后我的配置文件如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;ui menu.c32&lt;/span&gt;
&lt;span class="na"&gt;timeout 30&lt;/span&gt;
&lt;span class="na"&gt;prompt 0&lt;/span&gt;

&lt;span class="na"&gt;menu title boot menu&lt;/span&gt;

&lt;span class="na"&gt;default lts&lt;/span&gt;

&lt;span class="na"&gt;label lts&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;linux /boot/vmlinuz-lts&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;initrd /boot/initramfs-lts&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;append modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;loop,squashfs,sd-mod,usb-storage,iwlmvm debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后，将官网下载下来的 &lt;code&gt;alpinelinux&lt;/code&gt; 的iso文件里面的内容复制到esp分区里&lt;/p&gt;
&lt;p&gt;至此，如果你讲目标机上电他就会启动到默认的alpinelinux的官方默认状态&lt;/p&gt;
&lt;h2&gt;alpinelinux定制&lt;/h2&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;alpinelinux有个机制，他会在启动阶段去initramfs所在的分区根目录里搜索任意名字
的 &lt;code&gt;.apkovl.tar.gz&lt;/code&gt; 文件并作为overlay挂载到系统分区上，利用这个特性
可以实现不重新打包官方的initramfs文件而定制系统的目的&lt;/p&gt;
&lt;p&gt;由于后续的lbu工具有bug 无法从环境里找到当前使用apkovl文件的名字，所以
我们只好将定制文件命名为 &lt;strong&gt;lark.apkovl.tar.gz&lt;/strong&gt; 这里的 lark 是我准备
给目标机定制的 &lt;code&gt;hostname&lt;/code&gt; 如果你不打算定制这个，就使用 &lt;code&gt;localhost.apkovl.tar.gz&lt;/code&gt;
这个名字 &lt;/p&gt;
&lt;p&gt;同时如果我们想要给alpinelinux预装一些软件，我们需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将相关的apk文件放到esp分区下的 &lt;strong&gt;apks&lt;/strong&gt; 目录下&lt;/li&gt;
&lt;li&gt;将待安装的程序名增加到apkovl定制包的 &lt;code&gt;etc/apk/world&lt;/code&gt; 里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们预装的是服务，除了安装以外，我们还需要将相关的服务启动文件
加入到启动目录下启动目录一般有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;etc/runlevels/sysinit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etc/runlevels/boot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etc/runlevels/default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应该在定制包里建立这些目录，并且做一些软连接，连接到相关的服务文件&lt;/p&gt;
&lt;p&gt;我建议一般人可以把目标机接上屏幕和键盘，然后上电启动到alpinlinux登陆&lt;/p&gt;
&lt;p&gt;使用root无密码登陆系统以后，直接执行 &lt;code&gt;lbu ci sdb1&lt;/code&gt; 来生成一个初始化的&lt;/p&gt;
&lt;p&gt;定制包，当然我本人的是自己定制一部分以后再生成的 这里的 sdb1是我目标&lt;/p&gt;
&lt;p&gt;机上的媒体设备名，大家应该执行下 &lt;code&gt;mount&lt;/code&gt; 命令，看看启动分区被挂载到了&lt;/p&gt;
&lt;p&gt;哪里，一般是 &lt;code&gt;/media/xxx&lt;/code&gt; 这里的xxx在我本机就是 sdb1 如果在你机器上是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/media/usb&lt;/code&gt; 则你应该执行的命令为 &lt;code&gt;lbu ci usb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下的具体的定制过程&lt;/p&gt;
&lt;p&gt;注意我说的修改定制包是指&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先解开 apkovl.tar.gz 文件到一个指定目录&lt;/li&gt;
&lt;li&gt;在此目录基础上做相关修改&lt;/li&gt;
&lt;li&gt;将此目录重新打包成 apkovl.tar.gz 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;hostname&lt;/h3&gt;
&lt;p&gt;修改定制包 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加文件 &lt;code&gt;etc/hostname&lt;/code&gt; 里面内容为 &lt;code&gt;lark&lt;/code&gt; 也就是我要的hostname&lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/default/hostname&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/hostname&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，目标机上电并启动后，hostname会自动调整为 lark&lt;/p&gt;
&lt;h3&gt;无线网络&lt;/h3&gt;
&lt;p&gt;修改定制包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改文件 &lt;code&gt;etc/apk/world&lt;/code&gt; 增加wpa_supplicant&lt;/li&gt;
&lt;li&gt;增加文件 &lt;code&gt;etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; 上网查下怎么根据wifi ap名
  和密码来生成此文件 提示是用 &lt;code&gt;wpa_passphare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加文件 &lt;code&gt;etc/conf.d/wpa_cli.sh&lt;/code&gt; 里面的内容为 &lt;code&gt;WPACLI_OPTS="-a /etc/wpa_supplicant/wpa_cli.sh"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/boot/networking&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/networking&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/boot/wpa_cli&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/wpa_cli&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/boot/wpa_supplicant&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/wpa_supplicant&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/boot/hwclock&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/hwclock&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，目标机上电并启动后，会自动使用给出的密码链接配置的无线网络ap名并获得ip&lt;/p&gt;
&lt;p&gt;并且在局域网里广播mdns名 lark&lt;/p&gt;
&lt;h3&gt;ssh&lt;/h3&gt;
&lt;p&gt;修改定制包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改文件 &lt;code&gt;etc/apk/world&lt;/code&gt; 增加openssh-server&lt;/li&gt;
&lt;li&gt;增加软连接 &lt;code&gt;etc/runlevels/default/sshd&lt;/code&gt; 链接到 &lt;code&gt;../../init.d/sshd&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;增加文件 &lt;code&gt;etc/apk/protected_paths.d/lbu.list&lt;/code&gt; 内容为 
&lt;code&gt;+add
+root/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加文件 &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt; 并注意对整个&lt;code&gt;/root/.ssh/&lt;/code&gt; 目录
  分配权限为600&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，目标机上电并启动后，会自动使用给出的密码链接配置的无线网络ap名并获得ip&lt;/p&gt;
&lt;p&gt;并且在局域网里广播mdns名 lark, 同时局域网同志们都可以用 `指定的公钥免密码登陆```&lt;/p&gt;</content><category term="posts"></category><category term="alpinelinux"></category><category term="启动盘"></category><category term="syslinux"></category><category term="uefi"></category></entry><entry><title>最小化的riscv32汇编环境构建</title><link href="https://geek42.info/minimal-assembly-enviroment-riscv32.html" rel="alternate"></link><published>2020-11-22T11:38:00+08:00</published><updated>2020-11-22T11:38:00+08:00</updated><author><name>jyf</name></author><id>tag:geek42.info,2020-11-22:/minimal-assembly-enviroment-riscv32.html</id><summary type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;我一直想构建一个自己的forth,之前用python实现过,但是&lt;/p&gt;
&lt;p&gt;社区一些高级特性都是用汇编语言实现的，因此我的python&lt;/p&gt;
&lt;p&gt;实现总是有些隔 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;我一直想构建一个自己的forth,之前用python实现过,但是&lt;/p&gt;
&lt;p&gt;社区一些高级特性都是用汇编语言实现的，因此我的python&lt;/p&gt;
&lt;p&gt;实现总是有些隔靴搔痒，所以我希望有一天能用汇编语言实现&lt;/p&gt;
&lt;p&gt;自己的forth,这方面社区有一个jonesforth 注释很完整，使用&lt;/p&gt;
&lt;p&gt;x86汇编实现，并且是教学目的，本来很适合的，但是x86汇编&lt;/p&gt;
&lt;p&gt;细节实在太多了，所以现在看中了专注简洁的riscv.&lt;/p&gt;
&lt;p&gt;另外一个原因是我发现使用汇编语言表示的算法过程逻辑对于&lt;/p&gt;
&lt;p&gt;理解更容易，而同上述原因一样，x86实在很不适合，之前最简洁&lt;/p&gt;
&lt;p&gt;的应该是mips, 至今我们还能在周围的路由器里大量见到它们，&lt;/p&gt;
&lt;p&gt;但是mips也有一些自己的wirk,比如延迟槽啥的,所以既然今天&lt;/p&gt;
&lt;p&gt;riscv已经开始崛起了，没理由不用它来作为学习平台.&lt;/p&gt;
&lt;p&gt;但是一旦我进入学习之后，发现一些很现实的问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+ 工具链太大，而且都在墙外，拖下来很慢，编译也慢
+ 主流发行版(我用的ubuntu)和工具默认都支持rv64 而忽略了rv32
+ 但是官方提供的riscv-reader手册却是用rv32i作为教学目标的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;基于此，我打算构建一个最小化，好编译，并且支持rv32为目标的&lt;/p&gt;
&lt;p&gt;汇编学习环境&lt;/p&gt;
&lt;p&gt;&lt;code&gt;郑重声明&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我使用的是 &lt;em&gt;Linux系统上的vim&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你对这俩不熟悉，可能未必觉得我这个构建目标有用&lt;/p&gt;
&lt;p&gt;同时需要确保你的系统上有gcc那一套工具链 在debian系的发行版上直接用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来安装&lt;/p&gt;
&lt;h1&gt;构建步骤&lt;/h1&gt;
&lt;h2&gt;模拟器&lt;/h2&gt;
&lt;p&gt;模拟器我选择使用 bellard的 &lt;a href="https://bellard.org/tinyemu/"&gt;tinyemu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是qemu的作者，质量有口碑，并且此人喜欢写小巧迷你的工具，符合我&lt;/p&gt;
&lt;p&gt;的口味, 顺便说下，他开发的tinycc社区有人支持了riscv 但是我没使用过&lt;/p&gt;
&lt;p&gt;也不确认是否支持汇编&lt;/p&gt;
&lt;h3&gt;构建&lt;/h3&gt;
&lt;p&gt;首先,在官方页面下载最新源码，我这里是 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://bellard.org/tinyemu/tinyemu-2019-12-21.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其次，需要确保自己的系统上有安装libcurl与libssl的开发者版本&lt;/p&gt;
&lt;p&gt;debian系的发行版可以使用下面命令安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install -y libcurl4-dev libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后，需要修改编译配置，默认的tinyemu所有选项都打开了，但是实际&lt;/p&gt;
&lt;p&gt;上我们的用途根本不需要 x86/128bit/sdl 这些特性&lt;/p&gt;
&lt;p&gt;具体步骤是打开 Makefile 文件&lt;/p&gt;
&lt;p&gt;将以下选项注释掉 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CONFIG_SDL=y&lt;/li&gt;
&lt;li&gt;CONFIG_INT128=y&lt;/li&gt;
&lt;li&gt;CONFIG_X86EMU=y&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释就是在这些行前面加 &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后执行 make &lt;/p&gt;
&lt;p&gt;编译成功以后会得到 &lt;code&gt;temu&lt;/code&gt; 和 &lt;code&gt;splitimg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;随便复制到哪里都可以&lt;/p&gt;
&lt;h2&gt;编译工具&lt;/h2&gt;
&lt;p&gt;这个我们选择binutils 并且我们只需要as和ld 以及target只支持rv32部分&lt;/p&gt;
&lt;h3&gt;构建&lt;/h3&gt;
&lt;p&gt;这里我们使用中国境内的gitee镜像做克隆仓库, 不放心的同学可以使用&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/riscv/riscv-binutils-gdb"&gt;原始的仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时需要注意的是编译依赖系统已安装过gnu工具链和bison这些&lt;/p&gt;
&lt;p&gt;下面是具体的编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://gitee.com/mirrors/riscv-binutils-gdb.git
cd riscv-binutils-gdb
mkdir build
cd build
../configure --target=riscv32-unknown-elf \
                      --enable-languages=c \
                      --disable-shared \
                      --disable-threads \
                      --disable-multilib \
                      --disable-gdb \
                      --disable-libssp \
                      --disable-gprof \
                      --disable-gold \
                      --disable-binutils \
                      --disable-intl \
                      --disable-libdecnumber \
                      --with-newlib \
                      --with-arch=rv32ima \
                      --with-abi=ilp32 \
                      --prefix=/opt/riscv32
make -j8 MAKEINFO=true &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;成功以后会得到 /opt/riscv32 目录下的rv32工具链 里面有as和ld 刚好足够&lt;/p&gt;
&lt;p&gt;编译和链接你的汇编持续拉&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;tinyemu的官方提供了一系列的预置的镜像，都很小巧，建议直接去官方下载，&lt;/p&gt;
&lt;p&gt;对于我们的目标而言，我们需要使用他的riscv32那个镜像，同时要使用他的&lt;/p&gt;
&lt;p&gt;9p支持，这里解释下，9p协议是个走网络的文件系统协议，tinyemu的镜像里&lt;/p&gt;
&lt;p&gt;有配置演示如何启用9p,启用以后，我们在模拟器的linux环境里用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mount -t 9p /dev/root /mnt&lt;/code&gt; 就可以把外部host配置好的目录挂载到模拟器&lt;/p&gt;
&lt;p&gt;里面，这样我们就可以在外部host开发我们的汇编代码，并使用之前编译好的&lt;/p&gt;
&lt;p&gt;binutils工具编译并链接成最终的elf可执行程序,放在9p挂载的目录里，然后&lt;/p&gt;
&lt;p&gt;在模拟器里面直接执行啦&lt;/p&gt;
&lt;p&gt;如果你是x86的环境，我在我的百度网盘里提供了一个编译好的模拟器供使用&lt;/p&gt;
&lt;p&gt;链接: https://pan.baidu.com/s/18NSlnMD8cqKo1jPvgkBNNg 提取码: wvfz &lt;/p&gt;
&lt;p&gt;当然本文描述的构建步骤在arm上也完全适用，因为我在自己的arm版chromebook&lt;/p&gt;
&lt;p&gt;上也构建成功了 步骤完全一致&lt;/p&gt;
&lt;p&gt;下面放一个我的arm版chromebook上的运行截图证明&lt;/p&gt;
&lt;p&gt;&lt;img alt="截图" src="images/temu-rv32.webp"&gt;&lt;/p&gt;</content><category term="posts"></category><category term="riscv32"></category><category term="assembly"></category></entry><entry><title>关于区块链在政务与公共事业上的应用思考</title><link href="https://geek42.info/blockchain-on-public-use.html" rel="alternate"></link><published>2019-11-10T21:40:00+08:00</published><updated>2019-11-10T21:40:00+08:00</updated><author><name>jyf</name></author><id>tag:geek42.info,2019-11-10:/blockchain-on-public-use.html</id><summary type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;区块链这个技术我是在接触比特币的时候了解的，虽然并不深入&lt;/p&gt;
&lt;p&gt;但基本概念已经掌握，当时就觉得此技术潜力无穷 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;区块链这个技术我是在接触比特币的时候了解的，虽然并不深入&lt;/p&gt;
&lt;p&gt;但基本概念已经掌握，当时就觉得此技术潜力无穷，而非局限于&lt;/p&gt;
&lt;p&gt;发币上，熟悉我的人应该知道，我一直对区块链应用于非发币事&lt;/p&gt;
&lt;p&gt;业很有兴趣，也有很多想法，奈何彼时加密货币风潮正起，即便&lt;/p&gt;
&lt;p&gt;是非发币事业，最后也要套个货币来刺激参与者。&lt;/p&gt;
&lt;p&gt;想不到突然之间总书记居然对这个技术感兴趣了，我想大概是有&lt;/p&gt;
&lt;p&gt;讲师去普及了下这个新技术给高层，而该技术的一些特点引起了&lt;/p&gt;
&lt;p&gt;他们的兴趣吧。&lt;/p&gt;
&lt;p&gt;既然总书记都发话了，想必后面会有一波风潮应用此技术，虽则&lt;/p&gt;
&lt;p&gt;难免鱼龙混杂，但是也是个机遇，我可以借此将以前的一些想法&lt;/p&gt;
&lt;p&gt;写出来，以供确有兴趣的部门参考。&lt;/p&gt;
&lt;p&gt;此类想法若放在从前必定会为有官部门嗤之以鼻的&lt;/p&gt;
&lt;h1&gt;区块链技术的特点&lt;/h1&gt;
&lt;p&gt;既然介绍要介绍该技术的应用，自然需要简介下该技术的特点，&lt;/p&gt;
&lt;p&gt;虽然涉及到不少技术原理，但是抛开细节来说，该技术的特点就&lt;/p&gt;
&lt;p&gt;是 &lt;em&gt;存档可以防止少数人篡改&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注意 这里说的是防止少数人篡改，圈子里人都知道51%攻击嘛&lt;/p&gt;
&lt;p&gt;那么这样的特点是很适合政务与公共事业的应用的，一来，防止&lt;/p&gt;
&lt;p&gt;少数人篡改的特点可以杜绝个别职权人士的操作，二来，如果&lt;/p&gt;
&lt;p&gt;确实有管控需要，则利用51%攻击来实现。当然 这里的攻击并&lt;/p&gt;
&lt;p&gt;非真攻击，乃是由于政府部门是金字塔结构，最上面有个管控&lt;/p&gt;
&lt;p&gt;所有的机构，他们自然可以下文件要求51%哪怕100%的节点参与&lt;/p&gt;
&lt;p&gt;修改。这节已经解释清楚，读者可自行揣摩。&lt;/p&gt;
&lt;h1&gt;应用&lt;/h1&gt;
&lt;h2&gt;所有可供公共查询的存档记录&lt;/h2&gt;
&lt;p&gt;这里有个很简单的例子就是个人婚姻状况，以前需要去民政局&lt;/p&gt;
&lt;p&gt;开具证明，政府各机关之间并不能直接读取的，现在完全可以&lt;/p&gt;
&lt;p&gt;做在区块链上，供需要此证明的政务事项读取，当然为了隐私&lt;/p&gt;
&lt;p&gt;考虑，可以引入一个个人授权机制，比如跟将来的身份证绑定&lt;/p&gt;
&lt;p&gt;用身份证里的密钥授权，或者给绑定手机发个TOTP验证码之类&lt;/p&gt;
&lt;p&gt;的&lt;/p&gt;
&lt;p&gt;我罗列下目前我能想到的一些政务应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;婚姻状况/单身证明/户籍所在地&lt;/li&gt;
&lt;li&gt;各种税金缴纳证明 这点深圳最近试行的区块链发票就是很
  好的方向&lt;/li&gt;
&lt;li&gt;需要公示以爬出塔西托陷阱的一些事务，比如各种专款使
  用&lt;/li&gt;
&lt;li&gt;重大决定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;政务办理流程&lt;/h2&gt;
&lt;p&gt;我经常看到总理批评基层办事，但老实说光批评恐怕是没有&lt;/p&gt;
&lt;p&gt;用的，即使是真的痛下决心严惩几个，也不过是沧海一粟，&lt;/p&gt;
&lt;p&gt;我认为应该将政务办理流程化，比如一个政务办理就是一个&lt;/p&gt;
&lt;p&gt;事务，办理人只要选择了分类，既可提前知道整个政务办理&lt;/p&gt;
&lt;p&gt;的流程以及各种前置要求，这个可以用类似kanban的工具实&lt;/p&gt;
&lt;p&gt;现，办理人员可以清晰的知道，该事项目前在哪个流程里，&lt;/p&gt;
&lt;p&gt;经手公务员是哪一位(或者不面向办理人员开放，仅供申诉&lt;/p&gt;
&lt;p&gt;时候使用)，是否拒绝，如拒绝有何种理由之类的。靠这种&lt;/p&gt;
&lt;p&gt;流程，应该能将许多低级的舞弊行为给排除掉，因为责任&lt;/p&gt;
&lt;p&gt;到人，想多批少批基本不可能。想用荒谬的理由应付，则&lt;/p&gt;
&lt;p&gt;因为有存档，且不好篡改容易被申诉机制给发现。后续甚至&lt;/p&gt;
&lt;p&gt;可以利用大数据来改善流程，或者发现一些不合理规定之类&lt;/p&gt;
&lt;p&gt;的。&lt;/p&gt;
&lt;h1&gt;衍生的想法&lt;/h1&gt;
&lt;p&gt;如果上述想法真的得以实行，我想各级政府部门应该增加&lt;/p&gt;
&lt;p&gt;一个单位叫信息局，专门托管政务数据以及面向辖区公民&lt;/p&gt;
&lt;p&gt;服务。我觉得这应该是强制要求，不应偷懒使用云服务。&lt;/p&gt;</content><category term="posts"></category><category term="区块链"></category><category term="政务"></category></entry><entry><title>关于微信车载版</title><link href="https://geek42.info/tencent-ai.html" rel="alternate"></link><published>2019-08-26T20:55:00+08:00</published><updated>2019-08-26T20:55:00+08:00</updated><author><name>jyf</name></author><id>tag:geek42.info,2019-08-26:/tencent-ai.html</id><summary type="html">&lt;p&gt;我又回来了, 经过了几年的停止更新以及懒得动手,兴趣又慢慢回来了，所以我把博客迁移&lt;/p&gt;
&lt;p&gt;到了github上 用他的pages功能托管，将来还会考虑 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;我又回来了, 经过了几年的停止更新以及懒得动手,兴趣又慢慢回来了，所以我把博客迁移&lt;/p&gt;
&lt;p&gt;到了github上 用他的pages功能托管，将来还会考虑基于ipfs发布&lt;/p&gt;
&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;今天看新闻发现腾讯微信与长安合作推了个车载版的微信&lt;/p&gt;
&lt;p&gt;[腾讯推出车载版微信][https://www.solidot.org/story?sid=61856] 核心内容应该是全&lt;/p&gt;
&lt;p&gt;语音交互。&lt;/p&gt;
&lt;h1&gt;想法&lt;/h1&gt;
&lt;p&gt;关于这个新闻我觉得核心在与全语音交互，至于是否微信出品则重要性不大。但是既然是&lt;/p&gt;
&lt;p&gt;微信出了，说明他们是有这个方向考虑由此我想到一些扩展,尤其是我立刻想到了小时候&lt;/p&gt;
&lt;p&gt;看过的一个印象极深的电视剧 &lt;code&gt;霹雳游侠&lt;/code&gt; 这里面的跑车是个人工智能车，当时看来天方&lt;/p&gt;
&lt;p&gt;夜谈，以如今的技术来看，虽然达不到电视剧的效果，但是执行日常任务则问题不大。想&lt;/p&gt;
&lt;p&gt;想那些智能音箱们。&lt;/p&gt;
&lt;h2&gt;人工智能车&lt;/h2&gt;
&lt;p&gt;我觉得微信既然做车载版，索性做大点，引入人工智能，可以做得跟霹雳游侠里面那辆车&lt;/p&gt;
&lt;p&gt;那样，与车主有问有答，同时由于接入了微信，也可以接入定制的小程序，帮助车主完成&lt;/p&gt;
&lt;p&gt;各种比如导航(&lt;strong&gt;关于这个我觉得可以专门开一期博文来描述&lt;/strong&gt;),订购商品之类的任务，&lt;/p&gt;
&lt;p&gt;如果接入家里的设备，则可以查看与指挥家里的智能电器了，这里可以扩展下，**建议微信&lt;/p&gt;
&lt;p&gt;弄个新的号码类型，就像物联网手机卡那样，可以叫物联网号，专门提供给符合微信认证&lt;/p&gt;
&lt;p&gt;做了微信接入的智能服务。**&lt;/p&gt;
&lt;h2&gt;智能手表&lt;/h2&gt;
&lt;p&gt;除了开车，还有个场景也是全语音的，就是前几年流行过的智能手表，这里面也可以考虑&lt;/p&gt;
&lt;p&gt;手表上提供一些微弱的类似智能音箱那样级别的ai.&lt;/p&gt;
&lt;h2&gt;智能头盔&lt;/h2&gt;
&lt;p&gt;除了开车和手表，其实偷窥也是个可以扩展的方向，因为随着交通法规的完善，摩托车和&lt;/p&gt;
&lt;p&gt;电瓶车都得强制佩戴头盔上路，尤其是后者，一下子让头盔的佩戴者扩展到上亿人口，如&lt;/p&gt;
&lt;p&gt;果能有个智能头盔，提供一些简单的辅助功能，比如导航，微信聊天，行车记录仪之类的&lt;/p&gt;
&lt;p&gt;我想用户应该是在千万级别的&lt;/p&gt;</content><category term="posts"></category><category term="腾讯"></category><category term="微信"></category><category term="AI"></category></entry><entry><title>关于智能售货机</title><link href="https://geek42.info/intelligent-automat.html" rel="alternate"></link><published>2017-11-09T00:16:20+08:00</published><updated>2017-11-09T00:16:20+08:00</updated><author><name>jyf</name></author><id>tag:geek42.info,2017-11-09:/intelligent-automat.html</id><summary type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;公司最近进了一个所谓智能售货机 是鲜喵自助的 &lt;img alt="智能售货机" src="/images/xianmiao.jpg"&gt; &lt;/p&gt;
&lt;p&gt;由于标榜智能噱头 所以我去观察了下 发现实在是有大问题&lt;/p&gt;
&lt;h1&gt;问题 …&lt;/h1&gt;</summary><content type="html">&lt;h1&gt;缘由&lt;/h1&gt;
&lt;p&gt;公司最近进了一个所谓智能售货机 是鲜喵自助的 &lt;img alt="智能售货机" src="/images/xianmiao.jpg"&gt; &lt;/p&gt;
&lt;p&gt;由于标榜智能噱头 所以我去观察了下 发现实在是有大问题&lt;/p&gt;
&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;此类智能售货机近来有不少家 都是打着&lt;strong&gt;无人&lt;/strong&gt;与&lt;strong&gt;信用机制&lt;/strong&gt;的噱头 但以我看来 基本都&lt;/p&gt;
&lt;p&gt;还是在烧投资人的钱送大家吃食顺便扩大铺货量而已 为了尽可能的铺货 他们降低了单个柜子&lt;/p&gt;
&lt;p&gt;的成本 美其名曰按照信用机制 我想这里会有一些显而易见的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽管我司员工素质颇高 不会私自偷拿 但公司并非严格限制人员出入 难免会有社会人员进出
  此类人员素质并非我司能够控制 而此售货机既无锁又无摄像头 实在是容易被人混水摸鱼&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这种柜子形象普通 很容易被来访客人误认为是公司日常的招待柜子 从而导致误用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于入驻本身会产生一定费用 其场所也必然是选择客流量不少的地方 光是一个柜子未免可惜
  了其广告价值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;改进建议&lt;/h1&gt;
&lt;h2&gt;有限度的信任&lt;/h2&gt;
&lt;p&gt;这里说的有限度的信任就跟共享单车一样 一开始他们实验完全不用锁 结果车子无影无踪 最后的&lt;/p&gt;
&lt;p&gt;方案则是有锁 但是不需要特别加固 所以你还是能看到有一些低素质的人破坏了锁拿回去私用 但&lt;/p&gt;
&lt;p&gt;由于比例较低 基本还是能cover的  因而我建议售货机亦可参照这种策略 从现有的柜子来说 成本&lt;/p&gt;
&lt;p&gt;比较低的改造应该是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增加电磁阀 用主控板控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加摄像头 用于监控 可以滚动覆盖sd卡 一旦出问题 才派人取卡 这样不需要网络支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开柜使用TOTP机制 这里可以参考阮一峰的介绍文章 [双因素认证][http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html]
  这样也不需要给柜子提供网络支持 只需要提供个9键数字键盘或者直接用摄像头扫手机上的开门二维码
  这里可能比较绕 简单说下 流程是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机扫下柜子上的二维码被导引到网站 并带上柜子的id &lt;/li&gt;
&lt;li&gt;网站通过totp机制生成一个能被柜子识别校验的二维码 显示在手机上&lt;/li&gt;
&lt;li&gt;手机将这个二维码提供给柜子的摄像头供扫描验证并开门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个方案只需要增加个主控板+电磁阀+摄像头(或者还要加个9键输入键盘) 成本不会太高 之所以想避免&lt;/p&gt;
&lt;p&gt;网络需求是因为从我司的广告机运营来看 &lt;strong&gt;物联网的流量实在太贵&lt;/strong&gt; 以及 &lt;strong&gt;不少室内可能根本就没信号&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;与其他商家联营&lt;/h2&gt;
&lt;p&gt;要么减低成本 要么增加负担的人 那么多拉几家商家来共同负担成本也是个可选方案 实际上 因为办公室的位置&lt;/p&gt;
&lt;p&gt;特殊 完全可以跟早餐商家联营 此类商家的商机在于办公室客流量较大 如果他们提供预订早餐送货上门服务 是&lt;/p&gt;
&lt;p&gt;可以像午餐那样大量合并订单 一起投送的 但早餐是需要保温的 所以如果能有售货机商家的支持 对于早餐商来&lt;/p&gt;
&lt;p&gt;说既能保证质量 又能降低开支 水果与冷饮类也可以考虑&lt;/p&gt;</content><category term="posts"></category><category term="automat"></category></entry></feed>